@page "/login"
@layout LoginLayout

@using Ecommerce.WebAssembly.Extensiones
@using Microsoft.AspNetCore.Components.Authorization
@inject IUsuarioServicio _usuarioServicio
@inject NavigationManager _navServicio
@inject IToastService toastService
@inject AuthenticationStateProvider autenticacionProvider

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-5">
            <div class="card rounded-lg mt-5">
                <div class="card-header"><h3 class="text-center font-weight-light my-4">Login</h3></div>
                <div class="card-body">
                    <EditForm Model="modelo" OnValidSubmit="Iniciar">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="form-floating mb-3">
                            <input class="form-control" id="inputEmail" type="email" placeholder="admin@example.com" @bind-value="modelo.Correo" autocomplete="off" />
                            <label for="inputEmail">Correo</label>
                            <ValidationMessage For="@(()=>modelo.Correo)" />
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" id="inputPassword" type="password" placeholder="123" @bind-value="modelo.Clave" autocomplete="off" />
                            <label for="inputPassword">Contraseña</label>
                            <ValidationMessage For="@(()=>modelo.Clave)" />
                        </div>

                        <div class="d-grid gap-1 mt-4 mb-0">
                            <button class="btn btn-primary" type="submit">Ingresar</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center py-3">
                    <div class="small"><a href="/registrarse">No tienes una cuenta? Registrate!</a></div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDTO modelo = new LoginDTO();

    private async Task Iniciar()
    {
        var response = await _usuarioServicio.Autorizacion(modelo);

        if (response.EsCorrecto)
        {
            SesionDTO sesion = (SesionDTO)response.Resultado!;

            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(sesion);

            if (sesion.Rol.ToLower() == "cliente")
                _navServicio.NavigateTo("/catalogo");
            else
                _navServicio.NavigateTo("/dashboard");
        }
        else
        {
            toastService.ShowWarning(response.Mensaje!);
        }
    }
}
